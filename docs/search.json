[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within communications GitHub email, also applies individual expressing public spaces (e.g. social media).","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior reported forwarded legal authorities necessary.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Questions contributions project require respect Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within project.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to cpp11eigen","title":"Contributing to cpp11eigen","text":"outlines propose change cpp11eigen. detailed info contributing , please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to cpp11eigen","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to cpp11eigen","text":"want make bigger change, ’s good idea first file issue make sure maintainer agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to cpp11eigen","text":"Fork repository clone onto computer. haven’t done , use usethis::create_from_github(\"pachadotdev/cpp11eigen\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). Even better, use make check command line run checks clean environment. R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. extra sure run make clean && make install && make test discard don’t outdated binaries. Create Git branch pull request (PR). Use usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Add description changes top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to cpp11eigen","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. edit C++ code, please run make format apply clang format style CI fail. Use roxygen2, Markdown syntax, documentation. Use testthat unit tests. Contributions test cases included easier understand accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to cpp11eigen","text":"Please note cpp11eigen project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with cpp11eigen","title":"Getting help with cpp11eigen","text":"Thanks using cpp11eigen! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with cpp11eigen","text":"Start making minimal reproducible example using reprex package. reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with cpp11eigen","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with cpp11eigen","text":"can’t reproduce bug, can’t fix !","code":""},{"path":"/articles/usage.html","id":"motivations","dir":"Articles","previous_headings":"","what":"Motivations","title":"Basic 'cpp11eigen' usage","text":"development cpp11eigen emerges desire follow simplified approach towards R C++ integration building top cpp11, ground rewrite C++ bindings R different design trade-offs features. cpp11eigen aims providing additional layer put end-user focus computation instead configuration (Vaughan, Hester, François 2023). Eigen linear algebra library C++ language, aiming towards good balance speed ease use. justified fact C++, current form, valuable address bottlenecks find interpreted languages R Python provide data structures functions linear algebra (Sanderson Curtin 2016). RcppEigen first published CRAN 2011, allows use Eigen via Rcpp, widely extended R package call C++ functions R (Eddelbuettel Sanderson 2014).","code":""},{"path":"/articles/usage.html","id":"design-choices","dir":"Articles","previous_headings":"","what":"Design choices","title":"Basic 'cpp11eigen' usage","text":"design choices cpp11eigen : Providing simpler implementation makes library easier understand, maintain, extend, benefiting current users future contributors. Offering completely header-approach, eliminating Application Binary Interface compatibility issues simplifying library integration distribution. Facilitating vendoring, allows inclusion library directly projects, thus simplifying dependency management distribution. ideas reflect comprehensive effort provide efficient interface integrating C++ R aligns Tidy philosophy (Wickham et al. 2019), addressing technical community-driven aspects influence software evolution. choices advantages disadvantages. disadvantage cpp11eigen convert data types automatically, user must explicit data types, especially passing data R C++ exporting final computation back R. advantage cpp11eigen codes, including internal templates, can adapted work Python via pybind11 (Jakob, Rhinelander, Moldovan 2016). cpp11eigen uses Hansen (2022) notation, meaning matrices column-major vectors expressed column vectors (.e., N×1N\\times1 matrices).","code":""},{"path":"/articles/usage.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Basic 'cpp11eigen' usage","text":"Convention: input R matrices denoted x, y, z, output intermediate C++ matrices denoted X, Y, Z. example functions can called R scripts proper headers following code: example includes Eigen, cpp11 cpp11eigen libraries, allows interfacing C++ R (.e., #include <cpp11.hpp>). also loads corresponding namespaces (.e., using namespace cpp11) order simplify notation (.e., using MatrixXd instead Eigen::MatrixXd). as_Matrix() function provided cpp11eigen pass matrix object R C++ Eigen can read. as_doubles_matrix() function also provided cpp11eigen pass MatrixXd object C++ R.","code":"#include <cpp11.hpp> #include <cpp11eigen.hpp>  using namespace Eigen; using namespace cpp11;  [[cpp11::register]] // allows using the function in R doubles_matrix<> solve_mat(doubles_matrix<> x) {   MatrixXd Y = as_Matrix(x); // convert from R to C++   MatrixXd Yinv = Y.inverse(); // Y^(-1)   return as_doubles_matrix(Yinv); // convert from C++ to R }"},{"path":"/articles/usage.html","id":"ordinary-least-squares","dir":"Articles","previous_headings":"Examples","what":"Ordinary Least Squares","title":"Basic 'cpp11eigen' usage","text":"Given design matrix XX outcome vector yy, one function obtain OLS estimator β̂=(XtX)−1(XtY)\\hat{\\beta} = (X^tX)^{-1}(X^tY) matrix (.e., column vector) : ols_mat() function receives inputs R calls ols_() computation C++ side. use const & specific C++ language allow pass data R C++ avoiding copying data, therefore saving time memory. ols_dbl() function returns vector instead matrix.","code":"MatrixXd ols_(const doubles_matrix<>& y, const doubles_matrix<>& x) {   MatrixXd Y = as_Matrix(y);  // Col<double> Y = as_Col(y); also works   MatrixXd X = as_Matrix(x);    MatrixXd XtX = X.transpose() * X;        // X'X   MatrixXd XtX_inv = XtX.inverse();        // (X'X)^(-1)   MatrixXd beta = XtX_inv * X.transpose() * Y;  // (X'X)^(-1)(X'Y)    return beta; }  [[cpp11::register]] doubles_matrix<> ols_mat(const doubles_matrix<>& y,                                              const doubles_matrix<>& x) {   MatrixXd beta = ols_(y, x);   return as_doubles_matrix(beta); }"},{"path":"/articles/usage.html","id":"additional-examples","dir":"Articles","previous_headings":"","what":"Additional Examples","title":"Basic 'cpp11eigen' usage","text":"package repository includes directory cpp11eigentest, contains R package uses Eigen, provides additional examples eigenvalues, Cholesky QR decomposition, linear models.","code":""},{"path":"/articles/usage.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Basic 'cpp11eigen' usage","text":"Eddelbuettel, Dirk, Conrad Sanderson. 2014. “RcppArmadillo: Accelerating R High-Performance C++ Linear Algebra.” Computational Statistics & Data Analysis 71 (March): 1054–63. https://doi.org/10.1016/j.csda.2013.02.005. Hansen, Bruce. 2022. Econometrics. Princeton University Press. Jakob, Wenzel, Jason Rhinelander, Dean Moldovan. 2016. Pybind11 — Seamless Operability C++11 Python. https://github.com/pybind/pybind11. Sanderson, Conrad, Ryan Curtin. 2016. “Armadillo: Template-Based C++ Library Linear Algebra.” Journal Open Source Software 1 (2): 26. https://doi.org/10.21105/joss.00026. Vaughan, Davis, Jim Hester, Romain François. 2023. Cpp11: C++11 Interface R’s c Interface. https://CRAN.R-project.org/package=cpp11. Wickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome Tidyverse.” Journal Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mauricio Vargas Sepulveda. Author, maintainer. Gael Guennebaud. Author.           Eigen library (C++) Gael Guennebaud. Author.           Eigen library (C++) Benot Jacob. Author.           Eigen library (C++) Intel Corporation. Author.           Eigen library (C++) Xerox Corporation. Author.           Eigen library (C++)","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vargas Sepulveda M, Guennebaud G, Guennebaud G, Jacob B, Intel Corporation, Xerox Corporation (2024). cpp11eigen: 'Eigen' Interface. R package version 0.2.5, https://github.com/pachadotdev/cpp11eigen, https://pacha.dev/cpp11eigen/.","code":"@Manual{,   title = {cpp11eigen: An 'Eigen' Interface},   author = {Mauricio {Vargas Sepulveda} and Gael Guennebaud and Gael Guennebaud and Benot Jacob and {Intel Corporation} and {Xerox Corporation}},   year = {2024},   note = {R package version 0.2.5,     https://github.com/pachadotdev/cpp11eigen},   url = {https://pacha.dev/cpp11eigen/}, }"},{"path":"/index.html","id":"cpp11eigen-","dir":"","previous_headings":"","what":"An Eigen Interface","title":"An Eigen Interface","text":"goal cpp11eigen provide novel approach use Eigen C++ library using header-cpp11 R package simplify things end-user. idea pass matrices/vectors R C++, write pure C++/Eigen code computation, export result back R proper data structures. follows goals cpp11: Enforcing copy--write semantics. Improving safety using R API C++ code. Using UTF-8 strings everywhere. Applying newer C++11 features. straightforward, simpler implementation. Faster compilation time lower memory requirements. Growing vectors efficiently. software useful , please consider donating Buy Coffee. donations used continue improving cpp11eigen.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An Eigen Interface","text":"can install development version cpp11eigen GitHub:","code":"remotes::install_github(\"pachadotdev/cpp11eigen\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"An Eigen Interface","text":"provided package template RStudio also works VS Code. idea package naive simple (like ). RStudio/VSCode create new project run: follow instructions README. vignettes contains detailed examples use test cpp11eigen, include Ordinary Least Squares.","code":"cpp11eigen::pkg_template()"},{"path":"/index.html","id":"linear-algebra-libraries","dir":"","previous_headings":"","what":"Linear Algebra Libraries","title":"An Eigen Interface","text":"Eigen supports OpenBLAS, Intel MKL, Accelerate framework (Mac). can install OpenBLAS Debian-based systems : can also use commands specific operating system. verify R using OpenBLAS, can run sessionInfo() restarting R check BLAS/LAPACK libraries use:","code":"sudo apt-get install libopenblas-dev Matrix products: default BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so; LAPACK version 3.10.0"},{"path":"/reference/cpp11eigen-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cpp11eigen: An 'Eigen' Interface — cpp11eigen-package","title":"cpp11eigen: An 'Eigen' Interface — cpp11eigen-package","text":"Provides function declarations inline function definitions facilitate communication R 'Eigen' 'C++' library linear algebra scientific computing.","code":""},{"path":[]},{"path":"/reference/cpp11eigen-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cpp11eigen: An 'Eigen' Interface — cpp11eigen-package","text":"Maintainer: Mauricio Vargas Sepulveda m.sepulveda@mail.utoronto.ca (ORCID) Authors: Gael Guennebaud (Eigen library (C++)) Gael Guennebaud (Eigen library (C++)) Benot Jacob (Eigen library (C++)) Intel Corporation (Eigen library (C++)) Xerox Corporation (Eigen library (C++))","code":""},{"path":"/reference/cpp_vendor.html","id":null,"dir":"Reference","previous_headings":"","what":"Vendor the cpp11 and cpp11eigen dependency — cpp_vendor","title":"Vendor the cpp11 and cpp11eigen dependency — cpp_vendor","text":"Vendoring act making copy 3rd party packages project using. often used go language community.","code":""},{"path":"/reference/cpp_vendor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vendor the cpp11 and cpp11eigen dependency — cpp_vendor","text":"","code":"cpp_vendor(dir = NULL, subdir = \"/inst/include\")"},{"path":"/reference/cpp_vendor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vendor the cpp11 and cpp11eigen dependency — cpp_vendor","text":"dir directory vendor code . subdir subdirectory vendor code .","code":""},{"path":"/reference/cpp_vendor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vendor the cpp11 and cpp11eigen dependency — cpp_vendor","text":"file path vendored code (invisibly).","code":""},{"path":"/reference/cpp_vendor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vendor the cpp11 and cpp11eigen dependency — cpp_vendor","text":"function vendors cpp11 cpp11eigen package copying cpp11 cpp11eigen headers `inst/include` folder adding 'cpp11 version: XYZ' 'cpp11eigen version: XYZ' top files, XYZ version cpp11 cpp11eigen currently installed machine. Vendoring places responsibility updating code . Bugfixes new features cpp11 cpp11eigen available code run `cpp_vendor()` .","code":""},{"path":"/reference/cpp_vendor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vendor the cpp11 and cpp11eigen dependency — cpp_vendor","text":"","code":"# create a new directory dir <- tempdir() dir.create(dir) #> Warning: '/tmp/RtmpLFqpvy' already exists  # vendor the cpp11 headers into the directory cpp_vendor(dir) #> Makevars and/or Makevars.win should have a line such as 'PKG_CPPFLAGS = -I../inst/include' #> DESCRIPTION should not have lines such as 'LinkingTo: cpp11'"},{"path":"/reference/eigen_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get eigen version — eigen_version","title":"Get eigen version — eigen_version","text":"Provides eigen C++ library version number included package.","code":""},{"path":"/reference/eigen_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get eigen version — eigen_version","text":"","code":"eigen_version()"},{"path":"/reference/eigen_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get eigen version — eigen_version","text":"string eigen version name number","code":""},{"path":"/reference/eigen_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get eigen version — eigen_version","text":"","code":"eigen_version() #> [1] \"3.4.0\""},{"path":"/reference/pkg_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a new project with the cpp11eigen package template — pkg_template","title":"Start a new project with the cpp11eigen package template — pkg_template","text":"Start new project cpp11eigen package template","code":""},{"path":"/reference/pkg_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a new project with the cpp11eigen package template — pkg_template","text":"","code":"pkg_template(path = NULL, pkgname = NULL)"},{"path":"/reference/pkg_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a new project with the cpp11eigen package template — pkg_template","text":"path Path new project pkgname Name new package","code":""},{"path":"/reference/pkg_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start a new project with the cpp11eigen package template — pkg_template","text":"file path copied template (invisibly).","code":""},{"path":"/reference/pkg_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a new project with the cpp11eigen package template — pkg_template","text":"","code":"# create a new directory dir <- tempdir() dir.create(dir) #> Warning: '/tmp/RtmpLFqpvy' already exists  # copy the package template into the directory pkg_template(dir, \"mynewpkg\")"},{"path":"/news/index.html","id":"cpp11eigen-025","dir":"Changelog","previous_headings":"","what":"cpp11eigen 0.2.5","title":"cpp11eigen 0.2.5","text":"Uses reinterpret_cast instead loops copy R C++ vice versa.","code":""},{"path":"/news/index.html","id":"cpp11eigen-02","dir":"Changelog","previous_headings":"","what":"cpp11eigen 0.2","title":"cpp11eigen 0.2","text":"Wrappers complex numbers. Expanded range tests. Adds benchmarks. Includes unsupported Eigen modules (.e., FFT). Add unsupported Eigen modules vendoring.","code":""},{"path":"/news/index.html","id":"cpp11eigen-01","dir":"Changelog","previous_headings":"","what":"cpp11eigen 0.1","title":"cpp11eigen 0.1","text":"First public version. Supports operations dense matrices column vectors. Elemental tests adapted cpp11armadillo.","code":""}]
